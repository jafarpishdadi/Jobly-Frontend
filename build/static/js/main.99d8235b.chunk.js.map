{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","shared-components/SearchForm.js","api/api.js","companies/CompanyCard.js","shared-components/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","shared-components/Alert.js","auth/LoginForm.js","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","routes-nav/Routes.js","App.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","logout","currentUser","useContext","className","to","onClick","Homepage","firstName","username","SearchForm","searchFor","searchTerm","setSearchTerm","onSubmit","evt","preventDefault","trim","undefined","name","placeholder","value","onChange","target","type","BASE_URL","JoblyApi","endpoint","data","method","url","headers","Authorization","token","params","axios","error","message","response","Array","isArray","this","request","res","user","companies","handle","company","title","jobs","id","CompanyCard","description","logoUrl","src","alt","LoadingSpinner","CompanyList","setCompanies","search","a","getCompanies","length","map","c","formatSalary","salary","digitsRev","salaryStr","toString","i","push","reverse","join","JobCard","equity","companyName","hasAppliedToJob","applyToJob","applied","setApplied","disabled","JobCardList","apply","job","JobList","setJobs","getJobs","CompanyDetail","useParams","setCompany","getCompany","Alert","messages","role","LoginForm","login","history","useHistory","password","formData","setFormData","formErrors","setFormErrors","handleSubmit","result","success","errors","handleChange","l","autoComplete","required","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","profileData","saveProfile","updatedUser","f","SignupForm","signup","PrivateRoute","exact","path","children","Routes","register","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","setToken","signupData","log","loginData","has","jwt","decode","getCurrentUser","applications","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99d8235b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(function setKeyInLocalStorage() {\r\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n    if (item === null) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, item);\r\n    }\r\n  }, [key, item]);\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\n\r\nconst UserContext = React.createContext();\r\n\r\nexport default UserContext;","import React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport \"./Navigation.css\";\r\n\r\n/** Navigation bar for site. Shows up on every page.\r\n *\r\n * When user is logged in, shows links to main areas of site. When not,\r\n * shows link to Login and Signup forms.\r\n *\r\n * Rendered by App.\r\n */\r\n\r\nfunction Navigation({ logout }) {\r\n  const { currentUser } = useContext(UserContext);\r\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\r\n\r\n  function loggedInNav() {\r\n    return (\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/companies\">\r\n              Companies\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/jobs\">\r\n              Jobs\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/profile\">\r\n              Profile\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\r\n              Log out\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  function loggedOutNav() {\r\n    return (\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/login\">\r\n              Login\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/signup\">\r\n              Sign Up\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <nav className=\"Navigation navbar navbar-expand-md\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Jobly\r\n        </Link>\r\n        {currentUser ? loggedInNav() : loggedOutNav()}\r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Homepage.css\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** Homepage of site.\r\n *\r\n * Shows welcome message or login/register buttons.\r\n *\r\n * Routed at /\r\n *\r\n * Routes -> Homepage\r\n */\r\n\r\nfunction Homepage() {\r\n  const { currentUser } = useContext(UserContext);\r\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\r\n\r\n  return (\r\n      <div className=\"Homepage\">\r\n        <div className=\"container text-center\">\r\n          <h1 className=\"mb-4 font-weight-bold\">Jobly</h1>\r\n          <p className=\"lead\">All the jobs in one, convenient place.</p>\r\n          {currentUser\r\n              ? <h2>\r\n                Welcome Back, {currentUser.firstName || currentUser.username}!\r\n              </h2>\r\n              : (\r\n                  <p>\r\n                    <Link className=\"btn btn-primary font-weight-bold mr-3\"\r\n                          to=\"/login\">\r\n                      Log in\r\n                    </Link>\r\n                    <Link className=\"btn btn-primary font-weight-bold\"\r\n                          to=\"/signup\">\r\n                      Sign up\r\n                    </Link>\r\n                  </p>\r\n              )}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { useState } from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\n/** Search widget.\r\n *\r\n * Appears on CompanyList and JobList so that these can be filtered\r\n * down.\r\n *\r\n * This component doesn't *do* the searching, but it renders the search\r\n * form and calls the `searchFor` function prop that runs in a parent to do the\r\n * searching.\r\n *\r\n * { CompanyList, JobList } -> SearchForm\r\n */\r\n\r\nfunction SearchForm({ searchFor }) {\r\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  /** Tell parent to filter */\r\n  function handleSubmit(evt) {\r\n    // take care of accidentally trying to search for just spaces\r\n    evt.preventDefault();\r\n    searchFor(searchTerm.trim() || undefined);\r\n    setSearchTerm(searchTerm.trim());\r\n  }\r\n\r\n  /** Update form fields */\r\n  function handleChange(evt) {\r\n    setSearchTerm(evt.target.value);\r\n  }\r\n\r\n  return (\r\n      <div className=\"SearchForm mb-4\">\r\n        <form className=\"form-inline\" onSubmit={handleSubmit}>\r\n          <input\r\n              className=\"form-control form-control-lg flex-grow-1\"\r\n              name=\"searchTerm\"\r\n              placeholder=\"Enter search term..\"\r\n              value={searchTerm}\r\n              onChange={handleChange}\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-lg btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://khadnot-jobly.herokuapp.com/\" || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.message);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default JoblyApi;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./CompanyCard.css\";\r\n\r\n/** Show limited information about a company\r\n *\r\n * Is rendered by CompanyList to show a \"card\" for each company.\r\n *\r\n * CompanyList -> CompanyCard\r\n */\r\n\r\nfunction CompanyCard({ name, description, logoUrl, handle }) {\r\n  console.debug(\"CompanyCard\", logoUrl);\r\n\r\n  return (\r\n      <Link className=\"CompanyCard card\" to={`/companies/${handle}`}>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">\r\n            {name}\r\n            {logoUrl && <img src={logoUrl} alt={name} className=\"float-right ml-5\" />}\r\n          </h6>\r\n          <p><small>{description}</small></p>\r\n        </div>\r\n      </Link>\r\n  );\r\n}\r\n\r\nexport default CompanyCard;\r\n","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\n/** Loading message used by components that fetch API data. */\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n      <div className=\"LoadingSpinner\">\r\n        Loading ...\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\r\nimport SearchForm from \"../shared-components/SearchForm\";\r\nimport JoblyApi from \"../api/api\";\r\nimport CompanyCard from \"./CompanyCard\";\r\nimport LoadingSpinner from \"../shared-components/LoadingSpinner\";\r\n\r\n/** Show page with list of companies.\r\n *\r\n * On mount, loads companies from API.\r\n * Re-loads filtered companies on submit from search form.\r\n *\r\n * This is routed to at /companies\r\n *\r\n * Routes -> { CompanyCard, SearchForm }\r\n */\r\n\r\nfunction CompanyList() {\r\n  console.debug(\"CompanyList\");\r\n\r\n  const [companies, setCompanies] = useState(null);\r\n\r\n  useEffect(function getCompaniesOnMount() {\r\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\r\n    search();\r\n  }, []);\r\n\r\n  /** Triggered by search form submit; reloads companies. */\r\n  async function search(name) {\r\n    let companies = await JoblyApi.getCompanies(name);\r\n    setCompanies(companies);\r\n  }\r\n\r\n  if (!companies) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"CompanyList col-md-8 offset-md-2\">\r\n        <SearchForm searchFor={search} />\r\n        {companies.length\r\n            ? (\r\n                <div className=\"CompanyList-list\">\r\n                  {companies.map(c => (\r\n                      <CompanyCard\r\n                          key={c.handle}\r\n                          handle={c.handle}\r\n                          name={c.name}\r\n                          description={c.description}\r\n                          logoUrl={c.logoUrl}\r\n                      />\r\n                  ))}\r\n                </div>\r\n            ) : (\r\n                <p className=\"lead\">Sorry, no results were found!</p>\r\n            )}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CompanyList;\r\n","import React, { useContext, useState } from \"react\";\r\nimport \"./JobCard.css\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** Show limited information about a job.\r\n *\r\n * Is rendered by JobCardList to show a \"card\" for each job.\r\n *\r\n * Receives apply func prop from parent, which is called on apply.\r\n *\r\n * JobCardList -> JobCard\r\n */\r\n\r\nfunction JobCard({ id, title, salary, equity, companyName }) {\r\n  console.debug(\"JobCard\");\r\n\r\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\r\n  const [applied, setApplied] = useState();\r\n\r\n  React.useEffect(function updateAppliedStatus() {\r\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\r\n\r\n    setApplied(hasAppliedToJob(id));\r\n  }, [id, hasAppliedToJob]);\r\n\r\n  /** Apply for a job */\r\n  async function handleApply(evt) {\r\n    if (hasAppliedToJob(id)) return;\r\n    applyToJob(id);\r\n    setApplied(true);\r\n  }\r\n\r\n  return (\r\n      <div className=\"JobCard card\"> {applied}\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">{title}</h6>\r\n          <p>{companyName}</p>\r\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\r\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\r\n          <button\r\n              className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\r\n              onClick={handleApply}\r\n              disabled={applied}\r\n          >\r\n            {applied ? \"Applied\" : \"Apply\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n/** Render integer salary like '$1,250,343' */\r\n\r\nfunction formatSalary(salary) {\r\n  const digitsRev = [];\r\n  const salaryStr = salary.toString();\r\n\r\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\r\n    digitsRev.push(salaryStr[i]);\r\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\r\n  }\r\n\r\n  return digitsRev.reverse().join(\"\");\r\n}\r\n\r\n\r\nexport default JobCard;\r\n","import React from \"react\";\r\nimport JobCard from \"./JobCard\";\r\n\r\n/** Show list of job cards.\r\n *\r\n * Used by both JobList and CompanyDetail to list jobs. Receives an apply\r\n * func prop which will be called by JobCard on apply.\r\n *\r\n * JobList -> JobCardList -> JobCard\r\n * CompanyDetail -> JobCardList -> JobCard\r\n *\r\n */\r\n\r\nfunction JobCardList({ jobs, apply }) {\r\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\r\n\r\n  return (\r\n      <div className=\"JobCardList\">\r\n        {jobs.map(job => (\r\n            <JobCard\r\n                key={job.id}\r\n                id={job.id}\r\n                title={job.title}\r\n                salary={job.salary}\r\n                equity={job.equity}\r\n                companyName={job.companyName}\r\n            />\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default JobCardList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Search from \"../shared-components/SearchForm\";\r\nimport JoblyApi from \"../api/api\";\r\nimport JobCardList from \"./JobCardList\";\r\nimport LoadingSpinner from \"../shared-components/LoadingSpinner\";\r\n\r\n/** Show page with list of jobs.\r\n *\r\n * On mount, loads jobs from API.\r\n * Re-loads filtered jobs on submit from search form.\r\n *\r\n * JobList -> JobCardList -> JobCard\r\n *\r\n * This is routed to at /jobs\r\n */\r\n\r\nfunction JobList() {\r\n  console.debug(\"JobList\");\r\n\r\n  const [jobs, setJobs] = useState(null);\r\n\r\n  useEffect(function getAllJobsOnMount() {\r\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\r\n    search();\r\n  }, []);\r\n\r\n  /** Triggered by search form submit; reloads jobs. */\r\n  async function search(title) {\r\n    let jobs = await JoblyApi.getJobs(title);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  if (!jobs) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"JobList col-md-8 offset-md-2\">\r\n        <Search searchFor={search} />\r\n        {jobs.length\r\n            ? <JobCardList jobs={jobs} />\r\n            : <p className=\"lead\">Sorry, no results were found!</p>\r\n        }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default JobList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport JoblyApi from \"../api/api\";\r\nimport JobCardList from \"../jobs/JobCardList\";\r\nimport LoadingSpinner from \"../shared-components/LoadingSpinner\";\r\n\r\n/** Company Detail page.\r\n *\r\n * Renders information about company, along with the jobs at that company.\r\n *\r\n * Routed at /companies/:handle\r\n *\r\n * Routes -> CompanyDetail -> JobCardList\r\n */\r\n\r\nfunction CompanyDetail() {\r\n  const { handle } = useParams();\r\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\r\n\r\n  const [company, setCompany] = useState(null);\r\n\r\n  useEffect(function getCompanyAndJobsForUser() {\r\n    async function getCompany() {\r\n      setCompany(await JoblyApi.getCompany(handle));\r\n    }\r\n\r\n    getCompany();\r\n  }, [handle]);\r\n\r\n  if (!company) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\r\n        <h4>{company.name}</h4>\r\n        <p>{company.description}</p>\r\n        <JobCardList jobs={company.jobs} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CompanyDetail;\r\n","import React from \"react\";\r\n\r\n/** Presentational component for showing bootstrap-style alerts.\r\n *\r\n * { LoginForm, SignupForm, ProfileForm } -> Alert\r\n **/\r\n\r\nfunction Alert({ type = \"danger\", messages = [] }) {\r\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\r\n\r\n  return (\r\n      <div className={`alert alert-${type}`} role=\"alert\">\r\n        {messages.map(error => (\r\n            <p className=\"mb-0 small\" key={error}>\r\n              {error}\r\n            </p>\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../shared-components/Alert\";\r\n\r\n/** Login form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls login function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> LoginForm -> Alert\r\n * Routed as /login\r\n */\r\n\r\nfunction LoginForm({ login }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"LoginForm\",\r\n      \"login=\", typeof login,\r\n      \"formData=\", formData,\r\n      \"formErrors\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await login(formData);\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(l => ({ ...l, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"LoginForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h3 className=\"mb-3\">Log In</h3>\r\n\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"username\"\r\n                      required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"current-password\"\r\n                      required\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null}\r\n\r\n                <button\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;","import React, { useState, useContext } from \"react\";\r\nimport Alert from \"../shared-components/Alert\";\r\nimport JoblyApi from \"../api/api\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** Profile editing form.\r\n *\r\n * Displays profile form and handles changes to local form state.\r\n * Submitting the form calls the API to save, and triggers user reloading\r\n * throughout the site.\r\n *\r\n */\r\n\r\nfunction ProfileForm() {\r\n  const { currentUser, setCurrentUser } = useContext(UserContext);\r\n  const [formData, setFormData] = useState({\r\n    firstName: currentUser.firstName,\r\n    lastName: currentUser.lastName,\r\n    email: currentUser.email,\r\n    username: currentUser.username,\r\n    password: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  // update profile confirmation\r\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\r\n\r\n  console.debug(\r\n      \"ProfileForm\",\r\n      \"currentUser=\", currentUser,\r\n      \"formData=\", formData,\r\n      \"formErrors=\", formErrors,\r\n      \"saveConfirmed=\", saveConfirmed,\r\n  );\r\n\r\n  /** on form submit:\r\n   * - attempt save to backend & report any errors\r\n   * - if successful\r\n   *   - clear previous error messages and password\r\n   *   - show save-confirmed message\r\n   *   - set current user info throughout the site\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n\r\n    let profileData = {\r\n      firstName: formData.firstName,\r\n      lastName: formData.lastName,\r\n      email: formData.email,\r\n      password: formData.password,\r\n    };\r\n\r\n    let username = formData.username;\r\n    let updatedUser;\r\n\r\n    try {\r\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\r\n    } catch (errors) {\r\n      debugger;\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n\r\n    setFormData(f => ({ ...f, password: \"\" }));\r\n    setFormErrors([]);\r\n    setSaveConfirmed(true);\r\n\r\n    // trigger reloading of user information throughout the site\r\n    setCurrentUser(updatedUser);\r\n  }\r\n\r\n  /** Handle form data changing */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(f => ({\r\n      ...f,\r\n      [name]: value,\r\n    }));\r\n    setFormErrors([]);\r\n  }\r\n\r\n  return (\r\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\r\n        <h3>Profile</h3>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label>Username</label>\r\n                <p className=\"form-control-plaintext\">{formData.username}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>First Name</label>\r\n                <input\r\n                    name=\"firstName\"\r\n                    className=\"form-control\"\r\n                    value={formData.firstName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Last Name</label>\r\n                <input\r\n                    name=\"lastName\"\r\n                    className=\"form-control\"\r\n                    value={formData.lastName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                    name=\"email\"\r\n                    className=\"form-control\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Confirm password to make changes:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className=\"form-control\"\r\n                    value={formData.password}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n\r\n              {formErrors.length\r\n                  ? <Alert type=\"danger\" messages={formErrors} />\r\n                  : null}\r\n\r\n              {saveConfirmed\r\n                  ?\r\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\r\n                  : null}\r\n\r\n              <button\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                  onClick={handleSubmit}\r\n              >\r\n                Save Changes\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ProfileForm;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../shared-components/Alert\";\r\n\r\n/** Signup form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls signup function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> SignupForm -> Alert\r\n * Routed as /signup\r\n */\r\n\r\nfunction SignupForm({ signup }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"SignupForm\",\r\n      \"signup=\", typeof signup,\r\n      \"formData=\", formData,\r\n      \"formErrors=\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await signup(formData);\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(data => ({ ...data, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"SignupForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h2 className=\"mb-3\">Sign Up</h2>\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>First name</label>\r\n                  <input\r\n                      name=\"firstName\"\r\n                      className=\"form-control\"\r\n                      value={formData.firstName}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Last name</label>\r\n                  <input\r\n                      name=\"lastName\"\r\n                      className=\"form-control\"\r\n                      value={formData.lastName}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Email</label>\r\n                  <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"form-control\"\r\n                      value={formData.email}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null\r\n                }\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SignupForm;","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** \"Higher-Order Component\" for private routes.\r\n *\r\n * In routing component, use these instead of <Route ...>. This component\r\n * will check if there is a valid current user and only continues to the\r\n * route if so. If no user is present, redirects to login form.\r\n */\r\n\r\nfunction PrivateRoute({ exact, path, children }) {\r\n  const { currentUser } = useContext(UserContext);\r\n\r\n  console.debug(\r\n      \"PrivateRoute\",\r\n      \"exact=\", exact,\r\n      \"path=\", path,\r\n      \"currentUser=\", currentUser,\r\n  );\r\n\r\n  if (!currentUser) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n      <Route exact={exact} path={path}>\r\n        {children}\r\n      </Route>\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Homepage from \"../homepage/Homepage\";\r\nimport CompanyList from \"../companies/CompanyList\";\r\nimport JobList from \"../jobs/JobList\";\r\nimport CompanyDetail from \"../companies/CompanyDetail\";\r\nimport LoginForm from \"../auth/LoginForm\";\r\nimport ProfileForm from \"../profiles/ProfileForm\";\r\nimport SignupForm from \"../auth/SignupForm\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\n/** Site-wide routes.\r\n *\r\n * Parts of site should only be visitable when logged in. Those routes are\r\n * wrapped by <PrivateRoute>, which is an authorization component.\r\n *\r\n * Visiting a non-existant route redirects to the homepage.\r\n */\r\n\r\nfunction Routes({ login, signup }) {\r\n  console.debug(\r\n      \"Routes\",\r\n      `login=${typeof login}`,\r\n      `register=${typeof register}`,\r\n  );\r\n\r\n  return (\r\n      <div className=\"pt-5\">\r\n        <Switch>\r\n\r\n          <Route exact path=\"/\">\r\n            <Homepage />\r\n          </Route>\r\n\r\n          <Route exact path=\"/login\">\r\n            <LoginForm login={login} />\r\n          </Route>\r\n\r\n          <Route exact path=\"/signup\">\r\n            <SignupForm signup={signup} />\r\n          </Route>\r\n\r\n          <PrivateRoute exact path=\"/companies\">\r\n            <CompanyList />\r\n          </PrivateRoute>\r\n\r\n          <PrivateRoute exact path=\"/jobs\">\r\n            <JobList />\r\n          </PrivateRoute>\r\n\r\n          <PrivateRoute exact path=\"/companies/:handle\">\r\n            <CompanyDetail />\r\n          </PrivateRoute>\r\n\r\n          <PrivateRoute path=\"/profile\">\r\n            <ProfileForm />\r\n          </PrivateRoute>\r\n\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Routes;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./shared-components/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  /*console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );*/\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.log(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n"],"sourceRoot":""}